01.面向过程：就是函数式编程，按照传统流程编写一个又一个的函数来解决需求的方式。(数据和处理函数没有关联起来，共同属于某个物件)

02.面向对象编程：就是讲你的需求抽象成一个对象，然后针对这个对象分析其属性和方法。因为属性和行为都是从属于对象的，于是有了'对象内'和'对象外'的概念，整个程序可以有一堆对象组成，对象于对象之间可能会有通信的接口。

03.javaScript中是用函数来充当类的。函数在javaScri中既可以当作普通函数使用，也可以当作类使用
    原型是一个对象，其他对象可以通过它实现属性继承。
    a.javaScript是基于原型的语言，通过new实例化出来的对象，其属性和行为来自于两部分，一部分来自于构造函数，另一部分来自于原型。
        什么是原型？当声明一个类时，同时生成了一个对应的原型。
          例如5.4-03案例：定义一个Animal类时，会生成一个与Animal类对应的原型，通过Animal.prototype可以指向这个原型，原型可以通过constructor指向Animal类(的构造函数)
    b.构造函数中定义的属性和行为比原型中定义的优先级高，定义的Animal类没有使用原型时，可以用原型方式重写。5.4-04案例

04.javaScript 中的 公有 和 私有 是通过作用域实现的
    a.定义在构造函数中的私有属性，没办法被原型中的方法访问，私有属性的作用域只在类的构造函数中
    b.让公有行为能够防卫私有属性和行为，就是将公有行为写在类的构造函数里，这样无论公有或私有都有共同作用的作用域里（但不推荐）
    c.get和set方法访问属性需要将相关的方法都放到构造函数里，会占用内存，但可以保护属性
05.传值和传址：如果是数值型，布尔型，字符型等基本数据类型，在进行赋值时会将数据复制一份，将复制的数据进行复制，也就是传值。
              如果时数组，hash对象等复杂数据类型，在进行复制时会直接用内存地址赋值。而不是将数据复制一份，可复制的数据进行赋值，也就是传址  